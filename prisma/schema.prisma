generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DelegueType {
  PREMIER
  DEUXIEME
}

enum Role {
  ETUDIANT
  ADMIN
}

enum ElectionType {
  SALLE
  ECOLE
  UNIVERSITE
}

enum CandidateStatus {
  EN_ATTENTE
  APPROUVE
  REJETE
}

enum ElectionNiveau {
  PHASE1
  PHASE2
  PHASE3
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique @db.VarChar(255)
  password             String   @db.VarChar(255)
  role                 Role     @default(ADMIN)
  createdAt            DateTime @default(now())
  actif                Boolean  @default(true)
  tempPassword         String?  @db.VarChar(255)
  requirePasswordChange Boolean @default(false)
  passwordResetExpires DateTime?

  // Relations
  etudiant             Etudiant?
  admin                Admin?
  votes                Vote[]
  candidates           Candidate[]
  generatedCodes       RegistrationCode[] @relation("GeneratedCodes")
  usedRegistrationCode RegistrationCode?  @relation("UsedCodes")
  voteTokens           VoteToken[]
  activityLogs         ActivityLog[] @relation("UserActivityLogs")
  notifications        Notification[]

  @@map("users")
}

model Etudiant {
  id              Int     @id @default(autoincrement())
  userId          String? @unique
  matricule       String? @unique @db.VarChar(50)
  codeInscription String? @unique @db.VarChar(50)
  identifiantTemporaire String? @unique @db.VarChar(50)
  nom             String? @db.VarChar(100)
  prenom          String? @db.VarChar(100)
  filiere         String? @db.VarChar(100)
  annee           Int?
  photoUrl        String? @db.VarChar(500)
  ecole           String? @db.VarChar(100)
  
  // Relations
  user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  responsableSalle ResponsableSalle[]

  @@map("etudiants")
}

model Election {
  id          Int         @id @default(autoincrement())
  type        ElectionType
  titre       String      @db.VarChar(200)
  description String?     @db.Text
  dateDebut   DateTime
  dateFin     DateTime
  dateDebutCandidature DateTime
  dateFinCandidature  DateTime
  createdAt   DateTime    @default(now())
  filiere     String?     @db.VarChar(100)
  annee       Int?
  ecole       String?     @db.VarChar(100)
  niveau      ElectionNiveau?
  delegueType DelegueType?
  isActive    Boolean     @default(true)

  // Relations
  candidates  Candidate[]
  votes       Vote[]
  voteTokens  VoteToken[]

  @@map("elections")
}

model Candidate {
  id         Int             @id @default(autoincrement())
  nom        String          @db.VarChar(100)
  prenom     String          @db.VarChar(100)
  slogan     String          @db.VarChar(200)
  programme  String          @db.Text
  motivation String          @db.Text
  photoUrl   String          @db.VarChar(500)
  statut     CandidateStatus @default(EN_ATTENTE)
  userId     String
  electionId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  votes      Vote[]

  @@unique([userId, electionId])
  @@map("candidates")
}

model Vote {
  id          Int       @id @default(autoincrement())
  userId      String
  electionId  Int
  candidateId Int
  createdAt   DateTime  @default(now())
  poidsVote   Float

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  election    Election  @relation(fields: [electionId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([userId, electionId])
  @@map("votes")
}

model ResponsableSalle {
  id         Int      @id @default(autoincrement())
  etudiantId Int
  filiere    String   @db.VarChar(100)
  annee      Int
  ecole      String   @db.VarChar(100)
  createdAt  DateTime @default(now())

  // Relations
  etudiant   Etudiant @relation(fields: [etudiantId], references: [id], onDelete: Cascade)
  delegueEcole DelegueEcole[]

  @@unique([etudiantId, annee])
  @@map("responsables_salle")
}

model DelegueEcole {
  id              Int      @id @default(autoincrement())
  responsableId   Int
  typeDelegue     DelegueType
  ecole           String   @db.VarChar(100)
  createdAt       DateTime @default(now())

  // Relations
  responsable     ResponsableSalle @relation(fields: [responsableId], references: [id], onDelete: Cascade)
  delegueUniversitaire DelegueUniversite[]

  @@unique([responsableId, typeDelegue, ecole])
  @@map("delegues_ecole")
}

model DelegueUniversite {
  id            Int      @id @default(autoincrement())
  delegueEcoleId Int
  typeDelegue   DelegueType
  createdAt     DateTime @default(now())

  // Relations
  delegueEcole  DelegueEcole @relation(fields: [delegueEcoleId], references: [id], onDelete: Cascade)

  @@map("delegues_universite")
}

model Admin {
  id      Int    @id @default(autoincrement())
  userId  String @unique
  nom     String @db.VarChar(100)
  prenom  String @db.VarChar(100)
  poste   String @db.VarChar(100)
  email   String @db.VarChar(255)

  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model RegistrationCode {
  id          String   @id @default(cuid())
  code        String   @unique @db.VarChar(50)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
  usedAt      DateTime?

  generatedBy String
  usedBy      String? @unique

  // Relations
  generatedByUser User @relation("GeneratedCodes", fields: [generatedBy], references: [id], onDelete: Cascade)
  usedByUser      User? @relation("UsedCodes", fields: [usedBy], references: [id], onDelete: Cascade)

  @@map("registration_codes")
}

model VoteToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique @db.VarChar(255)
  userId      String
  electionId  Int
  isUsed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  usedAt      DateTime?

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  election    Election  @relation(fields: [electionId], references: [id], onDelete: Cascade)

  @@unique([userId, electionId])
  @@map("vote_tokens")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String   @db.VarChar(100)
  details   String?  @db.Text
  userId    String?
  actionType String  @default("INFO") @db.VarChar(20)
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation("UserActivityLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Notification {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(200)
  message   String   @db.Text
  type      String   @db.VarChar(50)
  priority  String   @db.VarChar(20)
  read      Boolean  @default(false)
  relatedEntity String? @db.VarChar(100)
  entityId  String?  @db.VarChar(50)

  userId    String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
  @@map("notifications")
}